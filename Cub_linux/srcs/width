display/dis_walls/dis_sprite.c:	*n = 30 / (double)param->width;
display/dis_walls/dis_sprite.c:	cube.x = (pt.loc.x + 0.5) * param->map.len_pix;
display/dis_walls/dis_sprite.c:	cube.y = (pt.loc.y + 0.5) * param->map.len_pix;
display/dis_walls/dis_sprite.c:	ds->d = get_line_2_pts(cube, param->hero.vec);
display/dis_walls/dis_sprite.c:	angle = get_angle_sprite(param->hero.vec, cube);
display/dis_walls/dis_sprite.c:	while (loop_cond(*n_wall, param->width, pt.loc, sp))
display/dis_walls/dis_sprite.c:		tab[0] = get_angle_right(param->hero.angle, counter);
display/dis_walls/dis_sprite.c:		ds.d = get_line_2_pts(pt, param->hero.vec);
display/dis_walls/dis_sprite.c:		tab[2] = get_d(param->hero, pt, counter);
display/dis_walls/dis_sprite.c:		param->wall = param->walls.sprite;
display/dis_walls/dis_sprite.c:		get_dim(&param->wall, tab[2], param, tab[0]);
display/dis_walls/dis_sprite.c:		param->x = get_x_sprite(ends.v, pt);
display/dis_walls/dis_sprite.c:			draw_wall(param->wall, *n_wall, param, 0xFF);
display/dis_walls/dis_sprite.c:		pt = get_pt_sprite(tab[0], *param, param->map);
display/dis_walls/dis_walls.c:		param->x = ((int)round(pt_a.x) % param->map.len_pix)
display/dis_walls/dis_walls.c:			% param->wall.img.width;
display/dis_walls/dis_walls.c:		param->x = ((int)round(pt_a.y) % param->map.len_pix)
display/dis_walls/dis_walls.c:			% param->wall.img.width;
display/dis_walls/dis_walls.c:		pt_a = get_dist_min(get_pt_h(*param, param->map, angle),
display/dis_walls/dis_walls.c:				get_pt_v(*param, param->map, angle), param, angle);
display/dis_walls/dis_walls.c:	n = 30 / (double)param->width;
display/dis_walls/dis_walls.c:	while (n_wall < param->width)
display/dis_walls/dis_walls.c:		angle = get_angle_right(param->hero.angle, c);
display/dis_walls/dis_walls.c:			get_dim(&param->wall, get_d(param->hero, pt_a, c), param, angle);
display/dis_walls/dis_walls.c:			draw_wall(param->wall, n_wall, param, color);
display/dis_walls/dis_walls.c:	start_y = (param->height - wall.height) / 2;
display/dis_walls/dis_walls.c:			pos = (pos_x * 4) + (param->img.size_line * (start_y + y));
display/dis_walls/dis_walls.c:			if (start_y + y >= 0 && start_y + y < param->height)
display/dis_walls/dis_walls.c:				param->img.data[pos] = color;
display/dis_walls/dis_walls.c:				param->img.data[pos + 1] = color;
display/dis_walls/dis_walls.c:				param->img.data[pos + 2] = color;
display/dis_walls/dis_walls.c:	start_y = (param->height - wall.height) / 2;
display/dis_walls/dis_walls.c:		if (start_y + y >= 0 && start_y + y < param->height)
display/dis_walls/dis_walls.c:			pos = (pos_x % param->width * 4)
display/dis_walls/dis_walls.c:				+ (param->img.size_line * (start_y + y));
display/dis_walls/dis_walls.c:			pos_2 = (param->x * 4)
display/dis_walls/dis_walls.c:			param->img.data[pos] = param->wall.img.data[pos_2];
display/dis_walls/dis_walls.c:			param->img.data[pos + 1] = param->wall.img.data[pos_2 + 1];
display/dis_walls/dis_walls.c:			param->img.data[pos + 2] = param->wall.img.data[pos_2 + 2];
display/dis_walls/dis_walls_utils.c:	wall->height = (param->height / dist) * 60;
display/dis_walls/get_texture.c:		param->wall = get_param_wall(pt_h, param->walls, angle);
display/dis_walls/get_texture.c:			param->wall = param->walls.sprite;
display/dis_walls/get_texture.c:			param->wall = param->walls.wall3;
display/dis_walls/get_texture.c:			param->wall = param->walls.wall4;
display/dis_walls/get_texture.c:			param->wall = param->walls.wall1;
display/dis_walls/get_texture.c:			param->wall = param->walls.wall2;
display/dis_walls/get_texture.c:		pt_a = get_pt_h(*param, param->map, angle);
display/dis_walls/get_texture.c:			param->wall = param->walls.wall3;
display/dis_walls/get_texture.c:			param->wall = param->walls.wall4;
display/dis_walls/get_texture.c:		pt_a = get_pt_v(*param, param->map, angle);
